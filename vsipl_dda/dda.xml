<?xml version="1.0" encoding="UTF-8"?>
<chapter label="4" version="5.0" xml:id="dda"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns6="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Direct Data Access Functions</title>

  <para><remark>The following will be added as chapter 4; subsequent chapters
  will be renumbered accordingly.</remark></para>

  <section>
    <title>Introduction</title>

    <para>Direct Data Access (DDA) provides the means to access block data via
    raw pointers, independent of how the block holds the data. This proxy
    access can be used to bridge locally with code expecting raw pointers
    without breaking the block abstraction.</para>

    <para><remark>TODO: The addition of DDA to VSIPL will require re-wording
    of section 1.7.2.3 of version 1.4 of the VSIPL specification, which
    suggests that direct data access is not possible.</remark></para>
  </section>

  <section>
    <title>Fundamentals</title>

    <para>The implementation may provide direct access to the block's own
    storage, or a temporary copy may be created. In either case, the memory to
    which the DDA pointer refers is in the VSIPL space. There is a third case:
    user space memory is provided and the DDA pointer refers to that user
    space memory instead.</para>

    <para>In the descriptions that follow, the block's own storage will be
    referred to simply as <emphasis>block memory</emphasis>. VSIPL space
    memory created by the implementation to store a temporary copy of the
    block's data for direct access will be referred to as a <emphasis>VSIPL
    space DDA buffer</emphasis>. User space memory provided to store a
    temporary copy of the block's data for direct access will be referred to
    as a <emphasis>user space DDA buffer</emphasis>. The term <emphasis>DDA
    buffer</emphasis> will be used when the buffer memory may be in either the
    VSIPL space or user space.</para>

    <para>In the event that the layout of the data in block memory is not
    well-suited for DDA, the implementation may lay out the data in a DDA
    buffer differently than in the block memory. In such cases, if no user
    space DDA buffer is provided, a VSIPL space DDA buffer will be created to
    accommodate the alternate layout. Additionally, the layout of the data in
    a DDA buffer may be specified as described in more detail below.</para>

    <para>If a DDA buffer is used, data must be synchronized between the block
    memory and the DDA buffer; the data synchronization paradigm is described
    in more detail below. It is important to note that synchronization will
    incur additional overhead: the
    <function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable>()</function>
    and
    <function>vsip_dda_<replaceable>d</replaceable>cost_<replaceable>p</replaceable>()</function>
    functions help to quantify this overhead. That being said, there may be
    situations in which using a DDA buffer results in less overhead, in
    aggregate, than accessing the block memory directly. For example, direct
    access via a DDA buffer in host memory may incur less overhead, in
    aggregate, than direct access to block memory in accelerator or
    co-processor memory.</para>
  </section>

  <section>
    <title>Type Definitions</title>

    <section>
      <title>Synchronization Policy</title>

      <para>As indicated above, if DDA provides access to the block via a DDA
      buffer, data must be synchronized between the DDA buffer and the block
      memory. When and to/ from where that synchronization occurs is specified
      by a synchronization policy.</para>

      <para>Blocks may be accessed via DDA as input (read-only), output
      (write-only), or input and output (read-write). In addition, the
      implementation can be instructed to provide access to blocks via a DDA
      buffer, regardless of whether it would have otherwise.</para>

      <para>Synchronization policies are named from the perspective of an
      external operation using the respective DDA pointer. For example, an
      input, or read-only, synchronization policy indicates that an external
      operation should only use the DDA pointer as input.</para>

      <synopsis>typedef unsigned int <emphasis role="bold">vsip_dda_sync_policy</emphasis>;

vsip_dda_sync_policy const <emphasis role="bold">VSIP_DDA_SYNC_POLICY_IN</emphasis> = 0x01;
vsip_dda_sync_policy const <emphasis role="bold">VSIP_DDA_SYNC_POLICY_OUT</emphasis> = 0x02;
vsip_dda_sync_policy const <emphasis role="bold">VSIP_DDA_SYNC_POLICY_INOUT</emphasis> = 0x03;
vsip_dda_sync_policy const <emphasis role="bold">VSIP_DDA_SYNC_POLICY_COPY</emphasis> = 0x04;</synopsis>

      <para>Policy flags may be OR'ed together. A policy with neither the
      <constant>VSIP_DDA_SYNC_POLICY_IN</constant> nor the
      <constant>VSIP_DDA_SYNC_POLICY_OUT</constant> flag set is
      invalid.</para>

      <para>A <constant>VSIPL_DDA_SYNC_POLICY_IN</constant> policy indicates
      that the block is treated as input. Data will be synchronized from the
      block memory to the DDA buffer at creation of the proxy object, and can
      be synchronized on-demand with a call to
      <function>vsip_dda_<replaceable>d</replaceable>sync_in_<replaceable>p</replaceable>()</function>.</para>

      <para>A <constant>VSIP_DDA_SYNC_POLICY_OUT</constant> policy indicates
      that the block is treated as output. Data will be synchronized from the
      DDA buffer to the block memory at destruction of the proxy object, and
      can be synchronized on-demand with a call to
      <function>vsip_dda_<replaceable>d</replaceable>sync_out_<replaceable>p</replaceable>()</function>.</para>

      <para>A <constant>VSIP_DDA_SYNC_POLICY_INOUT</constant> policy indicates
      that the block is treated as both input and output. Data will be
      synchronized from the block memory to the DDA buffer at creation of the
      proxy object and from the DDA buffer to the block memory at destruction
      of the proxy object. Data can be synchronized on demand from the block
      memory to the DDA buffer with a call to
      <function>vsip_dda_<replaceable>d</replaceable>sync_in_<replaceable>p</replaceable>()</function>,
      and from the DDA buffer to the block memory with a call to
      <function>vsip_dda_<replaceable>d</replaceable>sync_out_<replaceable>p</replaceable>()</function>.</para>

      <para>If the <constant>VSIP_DDA_SYNC_POLICY_OUT</constant> policy is
      used, and a DDA buffer is either implicitly or explicitly used, the DDA
      buffer may not be initialized, and should be treated as
      write-only.</para>

      <para>A <constant>VSIP_DDA_SYNC_POLICY_COPY</constant> policy indicates
      that the block should be copied into separate a DDA buffer, even if the
      implementation would otherwise provide a direct access to the block
      memory.</para>
    </section>

    <section>
      <title>Proxy Object</title>

      <para>The DDA proxy object for a block of floating-point data is defined
      as follows.</para>

      <synopsis>struct vsip_dda_dataobject_<replaceable>f</replaceable>;
typedef struct vsip_dda_dataobject_<replaceable>f</replaceable> <emphasis
          role="bold">vsip_dda_data_<replaceable>f</replaceable></emphasis>;</synopsis>

      <para>The DDA proxy object for a block of complex floating-point data is
      defined as follows.</para>

      <synopsis>struct vsip_dda_cdataobject_<replaceable>f</replaceable>;
typedef struct vsip_dda_cdataobject_<replaceable>f</replaceable> <emphasis
          role="bold">vsip_dda_cdata_<replaceable>f</replaceable></emphasis>;</synopsis>

      <remark>TODO: Define other proxy object types.</remark>
    </section>

    <section>
      <title>Proxy Object Attributes</title>

      <para>The attributes of a DDA proxy object are defined as
      follows.</para>

      <synopsis>typedef struct
{
  vsip_length length;
  vsip_datalayout *layout;
  vsip_dda_sync_policy sync_policy;
} <emphasis role="bold">vsip_dda_dataattr</emphasis>;</synopsis>

      <remark>Thoughts:</remark>

      <itemizedlist>
        <listitem>
          <remark>The problem with defining type-agnostic proxy attributes is
          that the attributes alone are not enough to tell you the size (in
          bytes) of the data because the length is given in elements, and the
          size of an element is not known. The user can easily figure this out
          from the associated call, so it might not be an issue.</remark>
        </listitem>

        <listitem>
          <remark>Another problem is that having only the length in the
          attributes, although conforming to the way that VSIPL blocks are
          defined, does not give the implementation the freedom to change the
          stride.</remark>
        </listitem>

        <listitem>
          <remark>The VSIPL DDA APIs below return raw pointers to the data
          that when incremented provide the next address in memory, and not
          necessarily the address of the next logical element, especially if
          the implementation is using an aligned pack type or other memory
          optimizations. In VSIPL++, the DDA pointer is a special type, whose
          operators are overloaded such that incrementing the pointer will
          yield the next logical data value, even if the implementation has
          optimized the memory.</remark>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Functions</title>

    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Function</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>cost_<replaceable>p</replaceable></function></entry>

            <entry>Cost Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_cptr_as_array_<replaceable>p</replaceable></function></entry>

            <entry>Complex Pointer Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_cptr_as_interleaved_<replaceable>p</replaceable></function></entry>

            <entry>Complex Pointer Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_cptr_as_split_<replaceable>p</replaceable></function></entry>

            <entry>Complex Pointer Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>datacreate_<replaceable>p</replaceable></function></entry>

            <entry>Proxy Object Constructor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>datadestroy_<replaceable>p</replaceable></function></entry>

            <entry>Proxy Object Destructor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>datagetattrib_<replaceable>p</replaceable></function></entry>

            <entry>Proxy Attribute Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_ptr_<replaceable>p</replaceable></function></entry>

            <entry>Real Pointer Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable></function></entry>

            <entry>Buffer Size Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>sync_in_<replaceable>p</replaceable></function></entry>

            <entry>Block to DDA Buffer Synchronization</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>sync_out_<replaceable>p</replaceable></function></entry>

            <entry>DDA Buffer to Block Synchronization</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>cost_<replaceable>p</replaceable></function></title>

      <para>This function computes the cost of providing direct data access to
      a block.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>int <emphasis role="bold">vsip_dda_cost_<replaceable>f</replaceable></emphasis>(vsip_block_<replaceable>f</replaceable> *block,
                    vsip_datalayout *layout,
                    vsip_dda_sync_policy sync_policy);

int <emphasis role="bold">vsip_dda_ccost_<replaceable>f</replaceable></emphasis>(vsip_cblock_<replaceable>f</replaceable> *block,
                     vsip_cdatalayout *layout,
                     vsip_dda_sync_policy sync_policy);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides the block for which the cost of
                  DDA will be computed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>layout</term>

                <listitem>
                  <para>This argument provides the layout attributes to use
                  when computing the cost of DDA. Null layout attributes
                  indicate that the function should use the block's layout in
                  computing the cost.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when computing the cost of DDA.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns a numeric value representing the cost
            of accessing the block via DDA.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>The behavior of this function is undefined if</para>

            <itemizedlist>
              <listitem>
                <para>The block object is not valid, or</para>
              </listitem>

              <listitem>
                <para>The synchronization policy is not valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_dcost_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_cptr_as_array_<replaceable>p</replaceable></function></title>

      <para>This function gets the raw complex pointer for DDA.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>vsip_cscalar_<emphasis><replaceable>f</replaceable></emphasis> *<emphasis
                role="bold">vsip_dda_cptr_as_array_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object whose raw
                  pointer will be returned.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns the raw pointer for DDA on success, or
            null on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return null if:</para>

            <itemizedlist>
              <listitem>
                <para>The proxy object is not valid, or</para>
              </listitem>

              <listitem>
                <para>The proxied data is not stored in the
                <function>VSIP_STORAGE_FORMAT_ARRAY</function> format.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_cptr_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_cptr_as_interleaved_<replaceable>p</replaceable></function></title>

      <para>This function gets the raw complex pointer for DDA.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>vsip_scalar_<replaceable>f</replaceable> *<emphasis
                role="bold">vsip_dda_cptr_as_interleaved_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object whose raw
                  pointer will be returned.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns the raw pointer for DDA on success, or
            null on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return null if:</para>

            <itemizedlist>
              <listitem>
                <para>The proxy object is not valid, or</para>
              </listitem>

              <listitem>
                <para>The proxied data is not stored in the
                <function>VSIP_STORAGE_FORMAT_INTERLEAVED_COMPLEX</function>
                format.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_cptr_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_cptr_as_split_<replaceable>p</replaceable></function></title>

      <para>This function gets the raw complex pointer for DDA.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>int <emphasis role="bold">vsip_dda_cptr_as_split_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data,
                             vsip_scalar_<replaceable>f</replaceable> **r,
                             vsip_scalar_<replaceable>f</replaceable> **i);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object whose raw
                  pointer will be returned.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>r</term>

                <listitem>
                  <para>This argument contains a pointer to the raw pointer
                  for DDA of the real values.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>i</term>

                <listitem>
                  <para>This argument provides a pointer to the raw pointer
                  for DDA of the imaginary values.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns zero on success and a non-zero value
            on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return a non-zero
            value if:</para>

            <itemizedlist>
              <listitem>
                <para>The proxy object is not valid, or</para>
              </listitem>

              <listitem>
                <para>The proxied data is not stored in the
                <function>VSIP_STORAGE_FORMAT_SPLIT_COMPLEX</function>
                format.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_cptr_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>datacreate_<replaceable>p</replaceable></function></title>

      <para>This function creates a DDA proxy object.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>vsip_dda_data_<replaceable>f</replaceable> *<emphasis
                role="bold">vsip_dda_datacreate_<replaceable>f</replaceable></emphasis>(vsip_block_<replaceable>f</replaceable> *block,
                                       vsip_datalayout *layout,
                                       vsip_dda_sync_policy sync_policy,
                                       vsip_scalar_<replaceable>f</replaceable> *buffer);

vsip_dda_cdata_<replaceable>f</replaceable> *<emphasis role="bold">vsip_dda_cdatacreate_<replaceable>f</replaceable></emphasis>(vsip_cblock_<replaceable>f</replaceable> *block,
                                         vsip_cdatalayout *layout,
                                         vsip_dda_sync_policy sync_policy,
                                         vsip_scalar_<replaceable>f</replaceable> *buffer);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides the block for which the DDA
                  proxy object will be created.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>layout</term>

                <listitem>
                  <para>This argument provides the layout attributes to use
                  for the proxy object. Null layout attributes indicate that
                  the function should use the block's layout to create the
                  proxy object.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use for the proxy object.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>buffer</term>

                <listitem>
                  <para>This argument provides pre-allocated user space memory
                  for use by the implementation as the DDA buffer; this memory
                  must be at least as big as the size reported by
                  <function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable>()</function>.
                  If null is provided, a VSIPL space DDA buffer will be used,
                  or direct access to the block memory will be provided, as
                  determined by the implementation and the synchronization
                  policy.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns a proxy object for the block, or null
            on failure. If the <constant>VSIP_DDA_SYNC_POLICY_IN</constant>
            flag is set in the synchronization policy, the associated DDA
            buffer, if any, will have been synchronized from the block
            memory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return null if</para>

            <itemizedlist>
              <listitem>
                <para>The block object is not valid, or</para>
              </listitem>

              <listitem>
                <para>The synchronization policy is not valid.</para>
              </listitem>
            </itemizedlist>

            <para>The behavior of this function is undefined if the buffer is
            not at least as big as the size reported by
            <function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable>()</function>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_dcost_p.c"
                parse="text"/>            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>datadestroy_<replaceable>p</replaceable></function></title>

      <para>This function destroys a DDA proxy object.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>int <emphasis role="bold">vsip_dda_datadestroy_<replaceable>f</replaceable></emphasis>(vsip_dda_data_<replaceable>f</replaceable> *data);

int <emphasis role="bold">vsip_dda_cdatadestroy_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object to
                  destroy</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns zero on success and a non-zero value
            on failure. If the <constant>VSIP_DDA_SYNC_POLICY_OUT</constant>
            flag is set in the synchronization policy, the associated DDA
            buffer, if any, will have been synchronized to the block
            memory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return a non-zero
            value if the proxy object is not valid.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_dcost_p.c"
                parse="text"/>            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>datagetattrib_<replaceable>p</replaceable></function></title>

      <para>This function gets the attributes of a proxy object.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>void <emphasis role="bold">vsip_dda_datagetattrib_<replaceable>f</replaceable></emphasis>(vsip_dda_data_<replaceable>f</replaceable> *data,
                              vsip_dda_dataattr *attrib);

void <emphasis role="bold">vsip_dda_cdatagetattrib_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data,
                               vsip_dda_dataattr *attrib);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>attrib</term>

                <listitem>
                  <para>This argument contains the proxy object
                  attributes.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function populates the attributes parameter with the
            values associated with the proxy object on successful completion,
            and makes no changes on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will not update the attributes parameter if
            the proxy object is not valid or if the attributes parameter is
            null.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include
                href="examples/dda_dproxygetattrib_p.c" parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_ptr_<replaceable>p</replaceable></function></title>

      <para>This function gets the pointer for DDA.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>vsip_scalar_<replaceable>f</replaceable> *<emphasis
                role="bold">vsip_dda_ptr_<replaceable>f</replaceable></emphasis>(vsip_dda_data_<replaceable>f</replaceable> *data);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object whose DDA
                  pointer will be returned.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns the pointer for DDA on success, or
            null on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return null if the
            proxy object is not valid.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_ptr_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable></function></title>

      <para>This function gets the size of the buffer required for direct data
      access.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>
vsip_length <emphasis role="bold">vsip_dda_required_buffer_size_<replaceable>f</replaceable></emphasis>(vsip_block_<replaceable>f</replaceable> *block,
                                            vsip_datalayout *layout,
                                            vsip_dda_sync_policy sync_policy);

vsip_length <emphasis role="bold">vsip_dda_crequired_buffer_size_<replaceable>f</replaceable></emphasis>(vsip_cblock_<replaceable>f</replaceable> *block,
                                             vsip_cdatalayout *layout,
                                             vsip_dda_sync_policy sync_policy);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides the block to use when computing
                  the DDA buffer size.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>layout</term>

                <listitem>
                  <para>This argument provides the layout attributes to use
                  when computing the DDA buffer size. Null layout attributes
                  indicate that the function should use the block's layout to
                  compute the size.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when computing the DDA buffer size.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns the size of the DDA buffer required to
            hold the block's data while it is accessed via DDA.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>The behavior of this function is undefined if</para>

            <itemizedlist>
              <listitem>
                <para>The block object is not valid, or</para>
              </listitem>

              <listitem>
                <para>The synchronization is not valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will return zero if no buffer is required
                because the implementation will provide access to the block
                data directly (i.e. to the block memory) and not via a DDA
                buffer.</para>
              </listitem>

              <listitem>
                <para>This function will always return a non-zero value if the
                <constant>VSIP_DDA_SYNC_POLICY_COPY</constant> flag is set in
                the synchronization policy; in such cases a DDA buffer is
                always required.</para>
              </listitem>

              <listitem>
                <para>A non-zero return value does not indicate that the user
                must provide a user space DDA buffer, only that a DDA buffer
                of that size will be used. If the user does not provide one, a
                VSIPL space DDA buffer will be created.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include
                href="examples/dda_drequired_buffer_size_p.c" parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>sync_in_<replaceable>p</replaceable></function></title>

      <para>This function synchronizes the proxy object from the block memory
      to the DDA buffer.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>int <emphasis role="bold">vsip_dda_sync_in_<replaceable>f</replaceable></emphasis>(vsip_dda_data_<replaceable>f</replaceable> *data);

int <emphasis role="bold">vsip_dda_csync_in_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object to
                  synchronize.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns zero on successful synchronization of
            the proxy object and a non-zero value on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will have no effect and return a non-zero
                value if the proxy object is not valid.</para>
              </listitem>

              <listitem>
                <para>This function will have no effect and return a non-zero
                value if the <constant>VSIP_DDA_SYNC_POLICY_IN</constant> flag
                is not set in the synchronization policy associated with the
                proxy object (i.e. the proxy object uses a write-only
                synchronization policy).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will have no effect and return zero if the
                implementation will provide direct access to the block memory,
                as determined by the implementation and by the synchronization
                policy associated with the proxy object, as there is no DDA
                buffer to synchronize.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_dsync_in_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>sync_out_<replaceable>p</replaceable></function></title>

      <para>This function synchronizes the proxy object from the DDA buffer to
      the block memory.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>int <emphasis role="bold">vsip_dda_sync_out_<replaceable>f</replaceable></emphasis>(vsip_dda_data_<replaceable>f</replaceable> *data);

int <emphasis role="bold">vsip_dda_csync_out_<replaceable>f</replaceable></emphasis>(vsip_dda_cdata_<replaceable>f</replaceable> *data);

<remark>// TODO: Define additional prototypes.</remark></synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>data</term>

                <listitem>
                  <para>This argument provides the proxy object to
                  synchronize.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns zero on successful synchronization of
            the proxy object, and a non-zero value on failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will have no effect and return a non-zero
                value if the proxy object is not valid.</para>
              </listitem>

              <listitem>
                <para>This function will have no effect and return a non-zero
                value if the <constant>VSIP_DDA_SYNC_POLICY_OUT</constant>
                flag is not set in the synchronization policy associated with
                the proxy object (i.e. the proxy object uses a read-only
                synchronization policy).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will have no effect and return zero if the
                implementation will provide direct access to the block memory,
                as determined by the implementation and by the synchronization
                policy associated with the proxy object, as there is no DDA
                buffer to synchronize from.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting><xi:include href="examples/dda_dsync_out_p.c"
                parse="text"/></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
