<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns6="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Block Layout</title>

  <para><remark>The following will be added as section 2.5.</remark></para>

  <section>
    <title>Type Definitions</title>

    <section>
      <title>Storage Format</title>

      <para>There are multiple ways to store complex data in memory. The
      storage format describes how data is stored in the corresponding memory,
      or how data should be handled by the corresponding function.</para>

      <synopsis>typdef enum
{
  VSIP_STORAGE_FORMAT_ANY,
  VSIP_STORAGE_FORMAT_ARRAY = 2,               /* VSIP_CMPLX_NONE */
  VSIP_STORAGE_FORMAT_SPLIT_COMPLEX = 1,       /* VSIP_CMPLX_SPLIT */
  VSIP_STORAGE_FORMAT_INTERLEAVED_COMPLEX = 0  /* VSIP_CMPLX_INTERLEAVED */
} <emphasis role="bold">vsip_storage_format</emphasis>;</synopsis>

      <para>The storage format of real-valued data is always
      <function>VSIP_STORAGE_FORMAT_ARRAY</function>.</para>

      <para>For complex data, a <function>VSIP_STORAGE_FORMAT_ARRAY</function>
      format indicates that the complex data is held in an array of type
      <function>vsip_cscalar_<replaceable>p</replaceable>[]</function>.</para>

      <para>A <function>VSIP_STORAGE_FORMAT_SPLIT_COMPLEX</function> format
      indicates that the complex data is held in two distinct arrays of type
      <function><replaceable>p</replaceable>[]</function>, with one array
      containing the real values and the other containing the imaginary
      values.</para>

      <para>A <function>VSIP_STORAGE_FORMAT_INTERLEAVED_COMPLEX</function>
      format indicates that the complex data is held in an array of type
      <function><replaceable>p</replaceable>[]</function>, width real and
      imaginary values alternating.</para>
    </section>

    <section>
      <title>Complex Storage Format</title>

      <para>Enumerated type for the preferred memory storage layout of complex
      data.</para>

      <warning>
        <para>This type was deprecated in version 1.5 of the specification and
        will be removed in a future revision;
        <function>vsip_storage_format</function> should be used
        instead.</para>
      </warning>

      <synopsis>typedef enum 
{
  VSIP_CMPLX_INTERLEAVED = 0, /* Interleaved */
  VSIP_CMPLX_SPLIT = 1,       /* Split, separate real and imaginary */
  VSIP_CMPLX_NONE = 2         /* No preferred storage layout */
} <emphasis role="bold">vsip_cmplx_mem</emphasis>;</synopsis>

      <remark>NEW RTF ISSUE: Replace vsip_cmplx_mem with vsip_storage_format
      in function and type definitions, remove the vsip_cmplx_mem type, and
      remove the value specifications from the vsip_storage_format type
      definition</remark>
    </section>

    <section>
      <title>Packing</title>

      <para>The packing type is used to specify how data is arranged within
      the block.</para>

      <synopsis>typedef enum
{
  VSIP_PACK_TYPE_ANY,
  VSIP_PACK_TYPE_UNIT_STRIDE,
  VSIP_PACK_TYPE_DENSE,
  VSIP_PACK_TYPE_ALIGNED,
  VSIP_PACK_TYPE_ALIGNED_8,
  VSIP_PACK_TYPE_ALIGNED_16,
  VSIP_PACK_TYPE_ALIGNED_32,
  VSIP_PACK_TYPE_ALIGNED_64,
  VSIP_PACK_TYPE_ALIGNED_128,
  VSIP_PACK_TYPE_ALIGNED_256,
  VSIP_PACK_TYPE_ALIGNED_512,
  VSIP_PACK_TYPE_ALIGNED_1024
} <emphasis role="bold">vsip_pack_type</emphasis>;</synopsis>

      <remark>NEW RTF ISSUE: Add text to describe the vsip_pack_type</remark>
    </section>

    <section>
      <title>Dimension Order</title>

      <para>The dimension order type is used to specify the order in which
      logical dimensions are used to address memory. Logical dimensions are
      numbered from major to minor, starting with zero. Dimensions not
      relevant to the data object are ignored.</para>

      <synopsis>typedef vsip_scalar_vi vsip_dim;

typedef struct
{
  vsip_dim dim0;
  vsip_dim dim1;
  vsip_dim dim2;
} <emphasis role="bold">vsip_dim_order</emphasis>;

vsip_dim_order const <emphasis role="bold">VSIP_DIM_ORDER_VROW_MAJOR</emphasis> = {0, 1, 2};
vsip_dim_order const <emphasis role="bold">VSIP_DIM_ORDER_MROW_MAJOR</emphasis> = {0, 1, 2};
vsip_dim_order const <emphasis role="bold">VSIP_DIM_ORDER_TROW_MAJOR</emphasis> = {0, 1, 2};

vsip_dim_order const <emphasis role="bold">VSIP_DIM_ORDER_VCOL_MAJOR</emphasis> = {0, 1, 2};
vsip_dim_order const <emphasis role="bold">VSIP_DIM_ORDER_MCOL_MAJOR</emphasis> = {1, 0, 2};
vsip_dim_order const <emphasis role="bold">VSIP_DIM_ORDER_TCOL_MAJOR</emphasis> = {2, 1, 0};</synopsis>

      <remark>NEW RTF ISSUE: Replace the vsip_major and vsip_tmajor types with
      the vsip_dim_order type where possible and appropriate</remark>
    </section>

    <section>
      <title>Layout Attributes</title>

      <para>How the implementation lays out the data in a block or buffer may
      be specified with layout attributes.</para>

      <para>The data layout attributes are defined as follows.</para>

      <synopsis>typedef struct 
{
  vsip_length dim;
  vsip_storage_format storage_format;
  vsip_pack_type packing;
  vsip_dim_order order;
} <emphasis role="bold">vsip_datalayout</emphasis>;</synopsis>
    </section>
  </section>
</section>
