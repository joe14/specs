<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="dda" xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns6="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Direct Data Access Functions</title>

  <titleabbrev>Direct Data Access</titleabbrev>
  
  <section>
    <title>Introduction</title>

    <para>Direct Data Access (DDA) provides the means to access block data via
    raw pointers, independent of how the block holds the data. This proxy
    access can be used to bridge locally with code expecting raw pointers
    without breaking the block abstraction.</para>
    
    <para><remark>VSIPL++ allows users to specify the block layout via the
    </remark><constant><remark>vsip::Layout</remark></constant><remark> structure. VSIPL does not provide this
    functionality. Do we need to add a layout specification to VSIPL?</remark>
    <emphasis role="bold"><remark> -- jpd3</remark></emphasis></para>

    <para><remark>The addition of DDA to VSIPL will require re-wording of
    section 1.7.2.3 of version 1.4 of the VSIPL specification, which suggests
    that direct data access is not possible.</remark><emphasis role="bold"><remark> -- jpd3
    </remark></emphasis></para>
  </section>

  <section>
    <title>Fundamentals</title>

    <para>The implementation may provide direct access to the block's own
    storage, or a temporary copy may be created. In either case, the memory to
    which the DDA pointers refer is in the VSIPL space. There is a third case:
    user space memory is provided and the DDA pointers refer to that user
    space memory instead.</para>

    <para>In the descriptions that follow, the block's own storage will be
    referred to simply as <emphasis>block memory</emphasis>. VSIPL space
    memory created by the implementation to store a temporary copy of the
    block's data for direct access will be referred to as a <emphasis>VSIPL
    space DDA buffer</emphasis>. User space memory provided to store a
    temporary copy of the block's data for direct access will be referred to
    as a <emphasis>user space DDA buffer</emphasis>. The term <emphasis>DDA
    buffer</emphasis> will be used when the memory may be in either the VSIPL
    space or user space.</para>

    <para>If a DDA buffer is used, data must be synchronized between the block
    memory and the DDA buffer. The data synchronization paradigm is described
    in more detail below.</para>
  </section>

  <section>
    <title>Type Definitions</title>

    <section>
      <title><code>vsip_dda_sync_policy_t</code></title>

      <para>As indicated above, if DDA provides access to the block via a DDA
      buffer, data must be synchronized between the DDA buffer and the block
      memory. When and to/ from where that synchronization occurs is specified
      by a synchronization policy.</para>

      <para>Blocks may be accessed via DDA as input (read-only), output
      (write-only), or input and output (read-write). In addition, the
      implementation can be configured to provide access to blocks via a DDA
      buffer, reguardless of whether it would have otherwise.</para>

      <para><remark>How can we enforce a read-only synchronization policy
      when direct access to the block memory is provided? -- We could use a
      const pointer, but that would require that we provide a</remark>
      <function><remark>vsip_dda_</remark><replaceable><remark>d</remark></replaceable><emphasis
      role="bold"><remark>ro</remark></emphasis><remark>_ptr_</remark><replaceable><remark>p</remark></replaceable><remark>()</remark></function>
      <remark>function as well and return NULL when the</remark>
      <function><remark>vsip_dda_</remark><replaceable><remark>d</remark></replaceable><remark>ptr_</remark><replaceable><remark>p</remark></replaceable><remark>()</remark></function>
      <remark>function is used with any of the write synchronization policies.</remark>
      <emphasis role="bold"><remark> -- jpd3</remark></emphasis></para>

      <synopsis>
typedef unsigned <emphasis role="bold">vsip_dda_sync_policy_t</emphasis>;

vsip_dda_sync_policy_t const <emphasis role="bold">vsip_dda_sync_policy_in</emphasis> = 0x01;
vsip_dda_sync_policy_t const <emphasis role="bold">vsip_dda_sync_policy_out</emphasis> = 0x02;
vsip_dda_sync_policy_t const <emphasis role="bold">vsip_dda_sync_policy_inout</emphasis> = in | out;
vsip_dda_sync_policy_t const <emphasis role="bold">vsip_dda_sync_policy_copy</emphasis> = 0x04;
        </synopsis>

      <para>Policy flags may be OR'ed together. A policy with neither the
      <constant>in</constant> nor the <constant>out</constant> flag set is
      invalid.</para>

      <para>An <constant>in</constant> policy indicates that the block is
      treated as input. Data must be synchronized with a call to
      <function>vsip_dda_<replaceable>d</replaceable>synchronize_<replaceable>p</replaceable>()</function>
      prior to the first access.</para>

      <para>An <constant>out</constant> policy indicates that the block is
      treated as output. Data must be synchronized with a call to
      <function>vsip_dda_<replaceable>d</replaceable>synchronize_<replaceable>p</replaceable>()</function>
      after the last access.</para>

      <para>If the <constant>out</constant> policy is used without the
      <constant>in</constant> policy, and a DDA buffer is either implicitly or
      explicitly used, the DDA buffer may not be initialized, and should be
      treated as write-only.</para>

      <para>A <constant>copy</constant> policy indicates that the block should
      be copied into separate a DDA buffer, even if the implementation would
      otherwise provide a direct access to the block memory.</para>
    </section>
  </section>

  <section>
    <title>Functions</title>

    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Function</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable></function></entry>

            <entry>Buffer Size Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>cost_<replaceable>p</replaceable></function></entry>

            <entry>Cost Accessor</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>sync_in_<replaceable>p</replaceable></function></entry>

            <entry>Block to DDA Buffer Synchronization</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>sync_out_<replaceable>p</replaceable></function></entry>

            <entry>DDA Buffer to Block Synchronization</entry>
          </row>

          <row>
            <entry><function>vsip_dda_<replaceable>d</replaceable>ptr_<replaceable>p</replaceable></function></entry>

            <entry>Pointer Accessor</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable></function></title>

      <para>This function gets the size of the buffer required for direct data
      access.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>
vsip_length vsip_dda_required_buffer_size_<replaceable>f</replaceable>(vsip_block_<replaceable>f</replaceable> *block,
                                            vsip_dda_sync_policy sync_policy);

vsip_length vsip_dda_crequired_buffer_size_<replaceable>f</replaceable>(vsip_cblock_<replaceable>f</replaceable> *block,
                                             vsip_dda_sync_policy sync_policy);

vsip_length vsip_dda_required_buffer_size_<replaceable>i</replaceable>(vsip_block_<replaceable>i</replaceable> *block,
                                            vsip_dda_sync_policy sync_policy);

vsip_length vsip_dda_crequired_buffer_size_<replaceable>i</replaceable>(vsip_cblock_<replaceable>i</replaceable> *block,
                                             vsip_dda_sync_policy sync_policy);

vsip_length vsip_dda_required_buffer_size_bl(vsip_block_bl *block,
                                             vsip_dda_sync_policy sync_policy);

vsip_length vsip_dda_required_buffer_size_vi(vsip_block_vi *block,
                                             vsip_dda_sync_policy sync_policy);
                                     
vsip_length vsip_dda_required_buffer_size_mi(vsip_block_mi *block,
                                             vsip_dda_sync_policy sync_policy);
                                     
vsip_length vsip_dda_required_buffer_size_ti(vsip_block_ti *block,
                                             vsip_dda_sync_policy sync_policy);
            </synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides a pointer to the block to use
                  when computing the DDA buffer size.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when computing the DDA buffer size.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns the size of the DDA buffer required to
            hold the block's data while it is accessed via DDA.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>The behavior of this function is undefined if the arguments
            do not conform to the following.</para>

            <itemizedlist>
              <listitem>
                <para>The block object must be valid.</para>
              </listitem>

              <listitem>
                <para>The synchronization policy must be valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will return zero if no buffer is required
                because the implementation will provide access to the block
                data directly (i.e. to the block memory) and not via a DDA
                buffer.</para>
              </listitem>

              <listitem>
                <para>This function will always return non-zero value if a
                <constant>copy</constant>synchronization policy is used; in
                such cases a DDA buffer is always required.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting>
              <xi:include href="examples/dda_drequired_buffer_size_p.c"
                parse="text"/>
            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>cost_<replaceable>p</replaceable></function></title>

      <para>This function computes the cost of providing direct data access to
      a block</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>
int vsip_dda_cost_<replaceable>f</replaceable>(vsip_block_<replaceable>f</replaceable> *block,
                    vsip_dda_sync_policy sync_policy);

int vsip_dda_ccost_<replaceable>f</replaceable>(vsip_cblock_<replaceable>f</replaceable> *block,
                     vsip_dda_sync_policy sync_policy);

int vsip_dda_cost_<replaceable>i</replaceable>(vsip_block_<replaceable>i</replaceable> *block,
                    vsip_dda_sync_policy sync_policy);

int vsip_dda_ccost_<replaceable>i</replaceable>(vsip_cblock_<replaceable>i</replaceable> *block,
                     vsip_dda_sync_policy sync_policy);

int vsip_dda_cost_bl(vsip_block_bl *block,
                     vsip_dda_sync_policy sync_policy);

int vsip_dda_cost_vi(vsip_block_vi *block,
                     vsip_dda_sync_policy sync_policy);
                                     
int vsip_dda_cost_mi(vsip_block_mi *block,
                     vsip_dda_sync_policy sync_policy);
                                     
int vsip_dda_cost_ti(vsip_block_ti *block,
                     vsip_dda_sync_policy sync_policy);
            </synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides a pointer to the block for
                  which the cost of DDA will be computed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when computing the cost of DDA.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns a numeric value representing the cost
            of accessing the block via DDA.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>The behavior of this function is undefined if the arguments
            do not conform to the following.</para>

            <itemizedlist>
              <listitem>
                <para>The block object must be valid.</para>
              </listitem>

              <listitem>
                <para>The synchronization policy must be valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting>
              <xi:include href="examples/dda_dcost_p.c" parse="text"/>
            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>sync_in_<replaceable>p</replaceable></function></title>

      <para>This function synchronizes the DDA buffer (i.e. from the block
      memory to the DDA buffer).</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>
int vsip_dda_sync_in_<replaceable>f</replaceable>(vsip_block_<replaceable>f</replaceable> *block,
                       vsip_dda_sync_policy sync_policy);

int vsip_dda_csync_in_<replaceable>f</replaceable>(vsip_cblock_<replaceable>f</replaceable> *block,
                        vsip_dda_sync_policy sync_policy);

int vsip_dda_sync_in_<replaceable>i</replaceable>(vsip_block_<replaceable>i</replaceable> *block,
                       vsip_dda_sync_policy sync_policy);

int vsip_dda_csync_in_<replaceable>i</replaceable>(vsip_cblock_<replaceable>i</replaceable> *block,
                        vsip_dda_sync_policy sync_policy);

int vsip_dda_sync_in_bl(vsip_block_bl *block,
                        vsip_dda_sync_policy sync_policy);

int vsip_dda_sync_in_vi(vsip_block_vi *block,
                        vsip_dda_sync_policy sync_policy);
                                     
int vsip_dda_sync_in_mi(vsip_block_mi *block,
                        vsip_dda_sync_policy sync_policy);
                                     
int vsip_dda_sync_in_ti(vsip_block_ti *block,
                        vsip_dda_sync_policy sync_policy);
            </synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides a pointer to the block whose
                  DDA buffer will be synchronized.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when synchronizing the block's DDA buffer.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns zero on successful synchronization of
            the block's DDA buffer according to the synchronization policy,
            and non-zero if the synchronization failed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return a non-zero
            value, indicating a failure, if the arguments do not conform to
            the following.</para>

            <itemizedlist>
              <listitem>
                <para>The block object must be valid.</para>
              </listitem>

              <listitem>
                <para>The synchronization policy must be valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will have no effect and return zero if the
                implementation will provide direct access to the block memory,
                as determined by the implementation and by the sychronization
                policy, as there is no DDA buffer to synchronize.</para>
              </listitem>

              <listitem>
                <para>This function will have no effect and return zero if a
                write-only synchronization policy is specified.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting>
              <xi:include href="examples/dda_dsync_in_p.c" parse="text"/>
            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>sync_out_<replaceable>p</replaceable></function></title>

      <para>This function synchronizes the block memory (i.e. from the DDA
      buffer to the block memory).</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>
int vsip_dda_sync_out_<replaceable>f</replaceable>(vsip_block_<replaceable>f</replaceable> *block,
                        vsip_dda_sync_policy sync_policy);

int vsip_dda_csync_out_<replaceable>f</replaceable>(vsip_cblock_<replaceable>f</replaceable> *block,
                         vsip_dda_sync_policy sync_policy);

int vsip_dda_sync_out_<replaceable>i</replaceable>(vsip_block_<replaceable>i</replaceable> *block,
                        vsip_dda_sync_policy sync_policy);

int vsip_dda_csync_out_<replaceable>i</replaceable>(vsip_cblock_<replaceable>i</replaceable> *block,
                         vsip_dda_sync_policy sync_policy);

int vsip_dda_sync_out_bl(vsip_block_bl *block,
                         vsip_dda_sync_policy sync_policy);

int vsip_dda_sync_out_vi(vsip_block_vi *block,
                         vsip_dda_sync_policy sync_policy);
                                     
int vsip_dda_sync_out_mi(vsip_block_mi *block,
                         vsip_dda_sync_policy sync_policy);
                                     
int vsip_dda_sync_out_ti(vsip_block_ti *block,
                         vsip_dda_sync_policy sync_policy);
            </synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides a pointer to the block whose
                  block memory will be synchronized with the DDA
                  buffer.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when synchronizing the block memory with the DDA
                  buffer.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns zero on successful synchronization of
            the block memory according to the synchronization policy, and
            non-zero if the synchronization failed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will have no effect and return a non-zero
            value, indicating a failure, if the arguments do not conform to
            the following.</para>

            <itemizedlist>
              <listitem>
                <para>The block object must be valid.</para>
              </listitem>

              <listitem>
                <para>The synchronization policy must be valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>This function will have no effect and return zero if the
                implementation will provide direct access to the block memory,
                as determined by the implementation and by the sychronization
                policy, as there is no DDA buffer to synchronize from.</para>
              </listitem>

              <listitem>
                <para>This function will have no effect and return zero if a
                read-only synchronization policy is specified.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting>
              <xi:include href="examples/dda_dsync_out_p.c" parse="text"/>
            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title><function>vsip_dda_<replaceable>d</replaceable>ptr_<replaceable>p</replaceable></function></title>

      <para>This function gets the pointer for DDA.</para>

      <variablelist>
        <varlistentry>
          <term>Functionality</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Prototypes</term>

          <listitem>
            <synopsis>
vsip_scalar_<replaceable>f</replaceable> *vsip_dda_ptr_<replaceable>f</replaceable>(vsip_block_<replaceable>f</replaceable> *block,
                              vsip_dda_sync_policy sync_policy,
                              vsip_scalar_<replaceable>f</replaceable> *buffer);

vsip_scalar_<replaceable>f</replaceable> *vsip_dda_cptr_<replaceable>f</replaceable>(vsip_cblock_<replaceable>f</replaceable> *block,
                               vsip_dda_sync_policy sync_policy,
                               vsip_scalar_<replaceable>f</replaceable> *buffer);

vsip_scalar_<replaceable>i</replaceable> *vsip_dda_ptr_<replaceable>i</replaceable>(vsip_block_<replaceable>i</replaceable> *block,
                              vsip_dda_sync_policy sync_policy,
                              vsip_scalar_<replaceable>i</replaceable> *buffer);

vsip_scalar_<replaceable>i</replaceable> *vsip_dda_cptr_<replaceable>i</replaceable>(vsip_cblock_<replaceable>i</replaceable> *block,
                               vsip_dda_sync_policy sync_policy,
                               vsip_scalar_<replaceable>i</replaceable> *buffer);

vsip_scalar_bl *vsip_dda_ptr_bl(vsip_block_bl *block,
                                vsip_dda_sync_policy sync_policy,
                                vsip_scalar_bl *buffer);

vsip_scalar_vi *vsip_dda_ptr_vi(vsip_block_vi *block,
                                vsip_dda_sync_policy sync_policy,
                                vsip_scalar_vi *buffer);

vsip_scalar_mi *vsip_dda_ptr_mi(vsip_block_mi *block,
                                vsip_dda_sync_policy sync_policy,
                                vsip_scalar_mi *buffer);

vsip_scalar_ti *vsip_dda_ptr_ti(vsip_block_ti *block,
                                vsip_dda_sync_policy sync_policy,
                                vsip_scalar_ti *buffer);
            </synopsis>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Arguments</term>

          <listitem>
            <variablelist>
              <varlistentry>
                <term>block</term>

                <listitem>
                  <para>This argument provides a pointer to the block whose
                  DDA pointer will be returned.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sync_policy</term>

                <listitem>
                  <para>This argument provides the synchronization policy to
                  use when getting the DDA pointer for the block.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>buffer</term>

                <listitem>
                  <para>This argument provides a pointer to pre-allocated user
                  space memory for use by the implementation as the DDA
                  buffer; this memory must be at least as big as the size
                  reported by
                  <function>vsip_dda_<replaceable>d</replaceable>required_buffer_size_<replaceable>p</replaceable>()</function>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Return Value</term>

          <listitem>
            <para>This function returns the pointer for DDA, or null on
            failure.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrictions</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Errors</term>

          <listitem>
            <para>This function will return null, indicating a failure, if the
            arguments do not conform to the following.</para>

            <itemizedlist>
              <listitem>
                <para>The block object must be valid.</para>
              </listitem>

              <listitem>
                <para>The synchronization policy must be valid.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notes/References</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Examples</term>

          <listitem>
            <programlisting>
              <xi:include href="examples/dda_dptr_p.c" parse="text"/>
            </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>See Also</term>

          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
